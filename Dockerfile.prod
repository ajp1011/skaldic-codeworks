# Production Dockerfile
FROM php:8.4-fpm AS base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    zip \
    unzip \
    && docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Copy composer files
COPY composer.json composer.lock ./

# Install PHP dependencies (production only, optimized)
RUN composer install --no-dev --optimize-autoloader --no-scripts --no-interaction

# Copy application code
COPY . .

# Install Node.js for building assets
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install \
    && npm run build \
    && mkdir -p /tmp/public_build && cp -r public/build /tmp/public_build/ \
    && npm cache clean --force \
    && apt-get remove -y nodejs \
    && apt-get autoremove -y

# Run composer scripts
RUN composer run-script post-autoload-dump

# Set permissions
RUN chown -R www-data:www-data /var/www \
    && chmod -R 755 /var/www/storage \
    && chmod -R 755 /var/www/bootstrap/cache \
    && chown -R root:root /tmp/public_build \
    && chmod -R 755 /tmp/public_build

# Optimize Laravel for production
RUN php artisan config:cache || true \
    && php artisan route:cache || true \
    && php artisan view:cache || true

# Expose port 9000
EXPOSE 9000

# Copy script to copy assets as root
RUN echo '#!/bin/sh\necho "Copying assets to volume..."\ncp -r /tmp/public_build/build /var/www/public/\nchown -R www-data:www-data /var/www/public/build\nchmod -R 755 /var/www/public/build\necho "Assets copied successfully"' > /usr/local/bin/copy-assets.sh && chmod +x /usr/local/bin/copy-assets.sh

# Run as www-data
USER www-data

CMD ["php-fpm"]

